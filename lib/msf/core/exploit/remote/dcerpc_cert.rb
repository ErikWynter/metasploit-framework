# -*- coding: binary -*-
module Msf

  ###
  #
  # This module provides service-specific methods for the DCERPC exploit mixin
  #
  ###
  module Exploit::Remote::DCERPC_CERT
    # request a certificate
    def request(options={})
      username = options[:username]
      template = options[:template] # Machine or User


      csr, key = create_csr(username)

      template = "Machine"
      cert_template = "CertificateTemplate:#{template}"
      attributes = cert_template.encode('UTF-16LE').force_encoding('ASCII-8bit')
      attributes += "\x00\x00" # add null bytes to match certipy output

      # # https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-wcce/d6bee093-d862-4122-8f2b-7b49102097dc
      # class CERTTRANSBLOB(NDRSTRUCT)
      # structure = (
      #   ("cb", ULONG),
      #   ("pb", PBYTE),
      # )
      
      # pctb_attribs = CERTTRANSBLOB()
      # pctb_attribs["cb"] = len(attributes)
      # pctb_attribs["pb"] = attributes

      # pctb_request = CERTTRANSBLOB()
      # pctb_request["cb"] = len(csr)
      # pctb_request["pb"] = csr

      # request = CertServerRequest()
      # request["dwFlags"] = 0
      # request["pwszAuthority"] = checkNullString(self.ca)
      # request["pdwRequestId"] = self.request_id
      # request["pctbAttribs"] = pctb_attribs
      # request["pctbRequest"] = pctb_request


    end
  end

  def create_csr(username)
    # generate rsa key
    key = OpenSSL::PKey::RSA.new(2048)
    csr = OpenSSL::X509::Request.new
    csr.version = 0
    csr.subject = OpenSSL::X509::Name.parse "CN=#{username}"
    csr.public_key = key.public_key
    csr.sign key, OpenSSL::Digest::SHA256.new
    [csr.to_der, key]
  end

  def generate_rsa_key
    OpenSSL::PKey::RSA.generate(2048, 65537)
  end
end